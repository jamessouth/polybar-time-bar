#!/bin/sh
# shellcheck disable=SC2003


DIR=$(dirname "$0")
. "${DIR}/config"
. "${DIR}/colors"
. "${DIR}/funcs"


mono() {
#{{{
	TIME=$(get_time "$1")
	W=$(printf '%s' "$TIME" | cut -d. -f1)
	P=$(printf '%s' "$TIME" | cut -d. -f2)

	if [ -z "$W" ]; then
		W=0
	fi

	EIGHTH=$(expr "$P" \* 8 / 1000000)

	PORTION=""
	case "$EIGHTH" in
		0) PORTION=" " ;;
		1) PORTION="\u258F" ;;
		2) PORTION="\u258E" ;;
		3) PORTION="\u258D" ;;
		4) PORTION="\u258C" ;;
		5) PORTION="\u258B" ;;
		6) PORTION="\u258A" ;;
		7) PORTION="\u2589" ;;
		8) PORTION="█" ;;
	esac

	SPACES=$(expr "$1" - "$W" - 1)

	WHOLE=""
	i=0
	while [ "$i" -lt "$W" ]; do
		WHOLE="${WHOLE}$2█"
		i=$(expr "$i" + 1)
	done

	if [ "$SPACES" -lt 0 ]; then
		SPACES=0
	fi

	printf '%s%b%*s\n' "$WHOLE" "$PORTION" "$SPACES" ''
}
#}}}


algo() {
#{{{
	TIME=$(get_time "$1")
	W=$(printf '%s' "$TIME" | cut -d. -f1)
	P=$(printf '%s' "$TIME" | cut -d. -f2)

	if [ -z "$W" ]; then
		W=0
	fi

	EIGHTH=$(expr "$P" \* 8 / 1000000)

	PORTION=""
	case "$EIGHTH" in
		0) PORTION=" " ;;
		1) PORTION="\u258F" ;;
		2) PORTION="\u258E" ;;
		3) PORTION="\u258D" ;;
		4) PORTION="\u258C" ;;
		5) PORTION="\u258B" ;;
		6) PORTION="\u258A" ;;
		7) PORTION="\u2589" ;;
		8) PORTION="█" ;;
	esac

	SPACES=$(expr "$1" - "$W" - 1)

	WHOLE=""
	i=0
	while [ "$i" -lt "$W" ]; do

		val=$(expr "$i" \* 49)
		col=$(printf '#a4%04x' "$val")
		WHOLE="${WHOLE}%{F${col}}█"

		i=$(expr "$i" + 1)
	done

	val=$(expr "$i" \* 49)
	col=$(printf '#a4%04x' "$val")
	WHOLE="${WHOLE}%{F${col}}"

	if [ "$SPACES" -lt 0 ]; then
		SPACES=0
	fi

	printf '%s%b%*s\n' "$WHOLE" "$PORTION" "$SPACES" ''
}
#}}}

grad() {
#{{{
	TIME=$(get_time "$1")
	W=$(printf '%s' "$TIME" | cut -d. -f1)
	P=$(printf '%s' "$TIME" | cut -d. -f2)

	if [ -z "$W" ]; then
		W=0
	fi

	EIGHTH=$(expr "$P" \* 8 / 1000000)

	PORTION=""
	case "$EIGHTH" in
		0) PORTION=" " ;;
		1) PORTION="\u258F" ;;
		2) PORTION="\u258E" ;;
		3) PORTION="\u258D" ;;
		4) PORTION="\u258C" ;;
		5) PORTION="\u258B" ;;
		6) PORTION="\u258A" ;;
		7) PORTION="\u2589" ;;
		8) PORTION="█" ;;
	esac

	SPACES=$(expr "$1" - "$W" - 1)

	WHOLE=""
	i=0
	while [ "$i" -lt "$W" ]; do
		current_color=$(rainbow "$i" "F")
		WHOLE="${WHOLE}${current_color}█"

		i=$(expr "$i" + 1)
	done

	current_color=$(rainbow "$i" "F")
	WHOLE="${WHOLE}${current_color}"

	if [ "$SPACES" -lt 0 ]; then
		SPACES=0
	fi

	printf '%s%b%*s\n' "$WHOLE" "$PORTION" "$SPACES" ''
}
#}}}

power() {
#{{{
	TIME=$(awk -v sz="$1" 'BEGIN {ts = systime(); split(strftime("%T",ts), a, ":");f = (a[1]/24 + a[2]/1440 + a[3]/86400) * sz;printf "%.6f.%d", f, ts%sz}')
	W=$(printf '%s' "$TIME" | cut -d. -f1)

	if [ -z "$W" ]; then
		W=0
	fi

	SPACES=$(expr "$1" - "$W")

	WHOLE=""
	i=0
	pwrln="$2"
	while [ "$i" -lt "$((W - 1))" ]; do
	  remainder=$(( (i + 1) % 5 ))

	  color_index=$(( i / 5 ))

	  current_color=$(powerline "$color_index")

	  if [ "$remainder" -eq 0 ]; then
	    next_color_index=$(( (i / 5) + 1 ))
	    next_color=$(powerline "$next_color_index")
	    WHOLE="${WHOLE}%{B${next_color}}$pwrln"
	  else
	    WHOLE="${WHOLE}%{F${current_color}}█"
	  fi

	  i=$((i + 1))
	done

	last_color_index=$(( (W - 1) / 5 ))
	last_color=$(powerline "$last_color_index")
	WHOLE="${WHOLE}%{F${last_color}}%{B-}$pwrln"

	if [ "$SPACES" -lt 0 ]; then
		SPACES=0
	fi

	printf '%s%*s\n' "$WHOLE" "$SPACES" ''
}
#}}}

time_() {
#{{{
	TIME=$(get_time "$1")
	W=$(printf '%s' "$TIME" | cut -d. -f1)

	if [ -z "$W" ]; then
		W=0
	fi

	DT="$(date +%F) $(date +%T)"
	LEN=${#DT}
	BEG=$(( ($1 / 2) - ($LEN / 2) ))
	END=$((BEG + LEN))
	DARK="#002b36"
	LIGHT="#fdf6e3"
	WHOLE=""
	i=0
	while [ "$i" -lt "$1" ]; do
		if [ "$i" -ge "$BEG" ] && [ "$i" -lt "$END" ]; then
			CHAR="$(expr substr "$DT" $((i - BEG + 1)) 1)"
			if [ "$i" -ge "$W" ]; then
				WHOLE="${WHOLE}%{B-}%{F${LIGHT}}${CHAR}"
			else	
				WHOLE="${WHOLE}%{B$(timeclrs "$i")}%{F${DARK}}${CHAR}"
			fi
		else
			if [ "$i" -ge "$W" ]; then
				WHOLE="${WHOLE}%{B-} " # Non-breaking space (U+00A0)
			else
				WHOLE="${WHOLE}%{B$(timeclrs "$i")} " # Non-breaking space (U+00A0)
			fi
		fi
		i=$((i + 1))
	done
	WHOLE="${WHOLE}%{B-}"
	printf '%s\n' "$WHOLE"
}
#}}}


rotate() {
#{{{
	TIME=$(get_time "$1")
	W=$(printf '%s' "$TIME" | cut -d. -f1)
	P=$(printf '%s' "$TIME" | cut -d. -f2)
	I=$(printf '%s' "$TIME" | cut -d. -f3)

	if [ -z "$W" ]; then
		W=0
	fi

	EIGHTH=$(expr "$P" \* 8 / 1000000)

	PORTION=""
	case "$EIGHTH" in
		0) PORTION=" " ;;
		1) PORTION="\u258F" ;;
		2) PORTION="\u258E" ;;
		3) PORTION="\u258D" ;;
		4) PORTION="\u258C" ;;
		5) PORTION="\u258B" ;;
		6) PORTION="\u258A" ;;
		7) PORTION="\u2589" ;;
		8) PORTION="█" ;;
	esac

	SPACES=$(expr "$1" - "$W" - 1)

	WHOLE=""
	i=0
	while [ "$i" -lt "$W" ]; do
		current_index=$(( (i + I) % $1 ))
		current_color=$(rotateclrs "$current_index")
		WHOLE="${WHOLE}${current_color}█"

		i=$(expr "$i" + 1)
	done

	last_index=$(( (W + I) % $1 ))
	last_color_segment=$(rotateclrs "$last_index")
	WHOLE="${WHOLE}${last_color_segment}"

	if [ "$SPACES" -lt 0 ]; then
		SPACES=0
	fi

	printf '%s%b%*s\n' "$WHOLE" "$PORTION" "$SPACES" ''
}
#}}}




countdown() {
#{{{

	if [ "$cd_has_begun" -eq 0 ]; then
		pid=$$
		hours=$(printf "%02d" "$cd_hours")
		mins=$(printf "%02d" "$cd_mins")
		secs=$(printf "%02d" "$cd_secs")

		timestr="${CDCOLOR}time%{F-}"
		hoursarea="%{A4:kill -3 $pid: A5:kill -4 $pid:}$hours%{A A}"
		minsarea="%{A4:kill -5 $pid: A5:kill -6 $pid:}$mins%{A A}"
		secsarea="%{A4:kill -7 $pid: A5:kill -8 $pid:}$secs%{A A}"
		widthstr="${CDCOLOR}width%{F-}"
		widtharea="%{A4:kill -11 $pid: A5:kill -12 $pid:}$cd_width%%{A A}"
		start="%{A2:kill -10 $pid:}${CDCOLOR}middle click to start%{F-}%{A}"
		printf '%s %s:%s:%s    %s %s    %s\n' "$timestr" "$hoursarea" "$minsarea" "$secsarea" "$widthstr" "$widtharea" "$start"

	else
		if [ "$totsecs" -gt 0 ]; then
			fg=$(( $(( totsecs + 85 )) % $1 ))
			bg=$(( totsecs % $1 ))
			if [ "$horiz" -eq 0 ]; then
				P=$(( totsecs % 8 ))

				if [ "$P" -eq 0 ] && [ $(( origtime - totsecs )) -gt 0 ]; then
					SP="${SP} "
				fi

				PORTION=""
				case "$P" in
					0) PORTION="" ;;
					1) PORTION="\u2581" ;;
					2) PORTION="\u2582" ;;
					3) PORTION="\u2583" ;;
					4) PORTION="\u2584" ;;
					5) PORTION="\u2585" ;;
					6) PORTION="\u2586" ;;
					7) PORTION="\u2587" ;;
				esac

#"$(rainbow "$fg" "F")$(rainbow "$bg" "B")
#"$(rainbow "$bg" "F")$(rainbow "$fg" "B")

				case $(( foldcount % 2 )) in
					0) printf '%s%b%s %s %s %s %s\n' "%{F#ff0000}%{B#104980}$SP" "$PORTION" "$cdw%{F- B-}" "$foldcount" "${#cdw}" "$P" "${#SP}" ;;
					1) printf '%s%b%s %s %s %s %s\n' "%{F#104980}%{B#ff0000}$cdw" "$PORTION" "$SP%{F- B-}" "$foldcount" "$dispwidth" "$spcs" "${#SP}" ;;
				esac
			else
				if [ $(( origtime - totsecs )) -gt 0 ]; then
					if [ $(( elapsed % dispwidth )) -eq 0 ]; then
						ltr=$(( ltr * -1 ))
						cngdir=$(( cngdir + 1 ))
						elapsed=0
					fi
				fi


				#[ "$cngdir" -eq "$whls" ] && [ "$elapsed" -gt 0 ] && SP="${SP} "


				#if [ $(( cngdir + PB )) -eq 8 ]; then
				#	barlen=$(( barlen + 1 ))
				#	PB=9
				#fi	

				#case $(( foldcount % 2 )) in
				#	0) printf '%s%s\n' "$(rainbow "$fg" "F")$(rainbow "$bg" "B")$SP" "$cdw" ;;
				#	1) printf '%s%s\n' "$(rainbow "$bg" "F")$(rainbow "$fg" "B")$cdw" "$SP" ;;
				#esac


				case $(( foldcount % 2 )) in
					0) printf '%s%s %s %s %s %s %s %s\n' "%{F#ff0000}%{B#104980}$SP" "$cdw%{F- B-}" "$cngdir" "$whls" "$foldcount" "$elapsed" "$ltr" "$dispwidth" > ~/fred.txt

;;
					1) printf '%s%s %s %s %s %s %s %s\n' "%{F#104980}%{B#ff0000}$cdw" "$SP%{F- B-}" "$cngdir" "$whls" "$foldcount" "$elapsed" "$ltr" "$dispwidth" > ~/fred.txt

;;




					#0) printf '%s%s %s %s %s %s\n' "$(rainbow "$fg" "F")$(rainbow "$bg" "B")$cdw" "$SP%{F- B-}" "$cngdir" "$PB" "$elapsed" "${#SP}" ;;
					#1) printf '%s%s %s %s %s %s\n' "$(rainbow "$fg" "F")$(rainbow "$bg" "B")$SP" "$cdw%{F- B-}" "$cngdir" "$PB" "$elapsed" "${#SP}" ;;


					#0) printf '%s %s %s\n' "$(rainbow "$fg" "F")$(rainbow "$bg" "B")$cdw" "$cngdir" "$elapsed" ;;
					#1) printf '%s\n' "$(rainbow "$bg" "F")$(rainbow "$fg" "B")$cdw" ;;
				esac

				if [ "$ltr" -eq 1 ]; then

cdw=$(sed "s/${b8}/${b7}/;t;s/${b7}/${b6}/;t;s/${b6}/${b5}/;t;s/${b5}/${b4}/;t;s/${b4}/${b3}/;t;s/${b3}/${b2}/;t;s/${b2}/${b1}/;t;s/${b1}/${b0}/;" << EOF
$cdw
EOF
)
				else

cdw=$(echo "$cdw" | rev | sed "s/${b8}/${b7}/;t;s/${b7}/${b6}/;t;s/${b6}/${b5}/;t;s/${b5}/${b4}/;t;s/${b4}/${b3}/;t;s/${b3}/${b2}/;t;s/${b2}/${b1}/;t;s/${b1}/${b0}/;" | rev)
				fi
			fi
				
			
		else
			xx=$(expr "$totsecs" % 2)
			if [ "$xx" -eq 0 ]; then
				printf '%s %s %s\n' "done" "$totsecs" "$xx"
			else
				printf '%s %s %s\n' "really done" "$totsecs" "$xx"
			fi
		fi

		if [ "$horiz" -eq 0 ]; then
			if [ "$P" -eq 0 ]; then
				if [ -z "$cdw" ]; then
					foldcount=$(( foldcount + 1 ))
					cdw="$baseblks"
					SP=""

				fi
cdw=$(sed "s/${b8}//" << EOF
$cdw
EOF
)
			fi
		else
			if [ "${cdw#"$b0"*}" != "$cdw" ] && [ "${cdw%*"$b0"}" != "$cdw" ]; then
				foldcount=$(( foldcount + 1 ))
				cdw="$baseblks"
				SP=""
				cngdir=0
				elapsed=-1
			fi

		fi

		totsecs=$(( totsecs - 1 ))
		elapsed=$(( elapsed + 1 ))
	fi


}
#}}}





horiz=1

b8="█"
b7="▇"
b6="▆"
b5="▅"
b4="▄"
b3="▃"
b2="▂"
b1="▁"
b0=" "
func_ind=0
tot_funcs=7
sleep_pid=0

cd_hours=0
cd_mins=0
cd_secs=0
cd_width=100
totsecs=0
cd_has_begun=0

#avoid 15,19,20

trap "changeCDBar 1" 1
trap "changeCDBar -1" 2
trap "changeCDHours 1" 3
trap "changeCDHours -1" 4
trap "changeCDMins 1" 5
trap "changeCDMins -1" 6
trap "changeCDSecs 1" 7
trap "changeCDSecs -1" 8
trap "startCD" 10
trap "changeCDWidth 1" 11
trap "changeCDWidth -1" 12

while true; do
    case "$func_ind" in
        0) mono "$MAINLEN" "$MONOCOLOR" ;;
        1) algo "$MAINLEN" ;;
        2) grad "$MAINLEN" ;;
        3) power "$PWRLEN" "$PWRCHAR" ;;
        4) time_ "$MAINLEN" ;;
        5) rotate "$MAINLEN" ;;
        6) countdown "$MAINLEN" ;;
        #6) function_7 ;;
        *)
           echo "Error: Invalid function index $func_ind"
           func_ind=0
           ;;
    esac

    sleep 1 &  
    sleep_pid=$! 
    wait 
done




#TIME_CALC=$(awk 'BEGIN {split(strftime("%T"), a, ":");f = (a[1]/24 + a[2]/1440 + a[3]/86400) * ARGV[1];printf "%.6f", f}' "$1")
#TIME_CALC=$(awk 'BEGIN {split(strftime("%T"), a, ":");f = (a[2]/60 + a[3]/3600) * ARGV[1];printf "%.6f", f}' "$1")



